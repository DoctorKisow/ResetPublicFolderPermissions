<#
.SYNOPSIS
    A script to reset then re-apply public folder permissions.
.DESCRIPTION
    This script will reset then re-apply public folder security back to baseline with the 
    "Default" and "Anonymous" permissions set to "None".
.PARAMETER PublicFolder
    The name of the public folder.
.PARAMETER PublicFolderOwner
    The alias of the user or group you want to set as the owner.
.PARAMETER DefaultPermission
    The permission that you are setting the "Default" permission to.
    The options are Owner, Publishing Editor, Editor, Publishing Author
    Author, Nonediting Author, Reviewer, Contributor and None.  The
    default permission is "None".
.PARAMETER AnonymousPermission
    The permission that you are setting the "Anonymous" permission to.
    The options are Owner, Publishing Editor, Editor, Publishing Author
    Author, Nonediting Author, Reviewer, Contributor and None.  The
    default permission is "None".
.EXAMPLE
    C:\PS> .\Set-PublicFolderPermissions -PublicFolder <public folder> -PublicFolderOwner <alias>
    C:\PS> .\Set-PublicFolderPermissions -PublicFolder <public folder> -PublicFolderOwner <alias> -DefaultPermission <permission> -AnonymousPermission <permission>
.LINK
    https://github.com/DoctorKisow/ResetPublicFolderPermissions 
.NOTES
    Author: Matthew R. Kisow, D.Sc.
    Date:   August 13, 2018
#>

Param(
     [Parameter(Mandatory=$True, Position=0)]
     [string]$PublicFolder,
     [Parameter(Mandatory=$True, Position=1)]
     [string]$PublicFolderOwner,
     [Parameter(Mandatory=$False, Position=2)]
     [string]$DefaultPermission,
     [Parameter(Mandatory=$False, Position=3)]
     [string]$AnonymousPermission
)

Function ErrorChecking
{
    if (-not Get-PublicFolder "$PublicFolder" -ErrorAction 'SilentlyContinue')
    {
         Write-Host "The group $PublicFolder does not exist."
         exit 1
    }
    
    $IsUser =  $PublicFolderOwner -ErrorAction 'SilentlyContinue'
    if (-not $IsUser)
    {
         Write-Host "The mailbox $Mailbox does not exist or is not a mailbox."
         exit 1
    }

    if ("Owner", "Publishing Editor", "Editor", "Publishing Author", "Author", "Nonediting Author", "Reviewer", "Contributor", "None" -notcontains $DefaultPermission)
    {
        $DefaultPermission = "None"
    }

    if ("Owner", "Publishing Editor", "Editor", "Publishing Author", "Author", "Nonediting Author", "Reviewer", "Contributor", "None" -notcontains $AnonymousPermission)
    {
        $DefaultPermission = "None"
    }
}

Function VerifyUpdates
{
    # The de-facto "CONFIRM" and "ARE YOU SURE" function used to review and proceed with script execution.
    Write-Host "Are you sure that you want to update the security on this public folder."
    $CONTINUE = Read-Host "[Y]es or [N]o"

    while("Y","N" -notcontains $CONTINUE)
    {
        Write-Host "Incorrect response, please try again."
	    $CONTINUE = Read-Host "[Y]es or [N]o"
    }

    IF ($CONTINUE -eq 'N')
    {
        Write-Host "The public folder security updates have been aborted at the operators request."
        exit 1
    }
}

Function UpdatePublicFolderSecurity
{
    $PubFolder = Get-PublicFolder "$PublicFolder" -Recurse -ResultSize Unlimited 
    $PubFolderPermission = $PubFolder | Get-PublicFolderClientPermission

    # Recursively remove permissions from all folders and their sub-folders.
    foreach ($PubFolderPermission in $PubFolder) 
    {
        write-host $PubFolderPermission.User.DisplayName $PubFolderPermission.Identity
        Remove-PublicFolderClientPermission $PubFolderPermission.Identity -User $PubFolderPermission.User.DisplayName -Confirm:$false
    }

    Get-PublicFolder "\Contracting Services" -Recurse | Add-PublicFolderClientPermission -User "SECExchangePublicFolderAdministrators" -AccessRights Owner
    # Obligatory and will not need once permissions have propogated.
    Get-PublicFolder "\Contracting Services" -Recurse | Add-PublicFolderClientPermission -User "mkisow" -AccessRights Owner
    Get-PublicFolder "\Contracting Services" -Recurse | Add-PublicFolderClientPermission -User "$PublicFolderOwner" -AccessRights Owner
    Get-PublicFolder "\Contracting Services" -Recurse | Add-PublicFolderClientPermission -User Default -AccessRights None
    Get-PublicFolder "\Contracting Services" -Recurse | Add-PublicFolderClientPermission -User Anonymous -AccessRights None
}

### Main Script

# If not already loaded, load the Exchange server PowerShell modules.
if ( (Get-PSSnapin -Name *Exchange* -ErrorAction SilentlyContinue) -eq $null )
{
    Add-PSSnapin *Exchange*
}

Write-Host -ForegroundColor White "Set-PublicFolderPermissions"
Write-Host ""

ErrorChecking
VerifyUpdates
UpdatePublicFolderSecurity

# Exit Script
exit 0
